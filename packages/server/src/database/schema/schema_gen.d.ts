/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Decimal = ColumnType<string, number | string>;

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
    ? ColumnType<S, I | undefined, U>
    : ColumnType<T, T | undefined, T>;

export interface Ban {
    cardId: string;
    formatId: number;
    id: Generated<number>;
    reasoning: string | null;
}

export interface CardEntry {
    cardId: string;
    count: number;
    deckId: number;
}

export interface CardPrice {
    cardId: string;
    formatId: number;
    priceInUsd: Decimal;
}

export interface Card {
    colorIdentity: string;
    displayName: string;
    imageUrl: string;
    manaCost: string;
    scryfallId: string;
    scryfallUrl: string;
    type: string;
}

export interface Deck {
    createdAt: Generated<Date>;
    displayName: string;
    formatId: number;
    id: Generated<number>;
    ownerId: number;
    updatedAt: Generated<Date>;
}

export interface Format {
    createdAt: Generated<Date>;
    displayName: string;
    id: Generated<number>;
    ownerId: number;
}

export interface Session {
    data: string | null;
    expires: number;
    sessionId: string;
}

export interface User {
    createdAt: Generated<Date>;
    displayName: string;
    googleUserId: string;
    id: Generated<number>;
}

export interface DB {
    bans: Ban;
    cardEntries: CardEntry;
    cardPrices: CardPrice;
    cards: Card;
    decks: Deck;
    formats: Format;
    sessions: Session;
    users: User;
}
